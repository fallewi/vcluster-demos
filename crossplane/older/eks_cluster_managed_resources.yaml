apiVersion: ec2.aws.upbound.io/v1beta1
kind: VPC
metadata:
  labels:
    testing.upbound.io/example-name: example
  name: demo-vpc
spec:
  forProvider:
    cidrBlock: 10.0.0.0/16
    enableDnsHostnames: true
    enableDnsSupport: true
    region: us-east-1
    tags:
      Name: demo-vpc
  providerConfigRef:
    name: aws
---
apiVersion: ec2.aws.upbound.io/v1beta1
kind: Subnet
metadata:
  labels:
    testing.upbound.io/example-name: subnet1
  name: subnet1
spec:
  forProvider:
    availabilityZone: us-east-1a
    cidrBlock: 10.0.1.0/24
    region: us-east-1
    tags:
      Name: demo-subnet1
    vpcIdSelector:
      matchLabels:
        testing.upbound.io/example-name: example
  providerConfigRef:
    name: aws
---
apiVersion: ec2.aws.upbound.io/v1beta1
kind: Subnet
metadata:
  labels:
    testing.upbound.io/example-name: subnet2
  name: subnet2
spec:
  forProvider:
    availabilityZone: us-east-1b
    cidrBlock: 10.0.2.0/24
    region: us-east-1
    tags:
      Name: demo-subnet2
    vpcIdSelector:
      matchLabels:
        testing.upbound.io/example-name: example
  providerConfigRef:
    name: aws
---
apiVersion: ec2.aws.upbound.io/v1beta1
kind: Subnet
metadata:
  labels:
    testing.upbound.io/example-name: subnet3
  name: subnet3
spec:
  forProvider:
    availabilityZone: us-east-1c
    cidrBlock: 10.0.3.0/24
    region: us-east-1
    tags:
      Name: demo-subnet3
    vpcIdSelector:
      matchLabels:
        testing.upbound.io/example-name: example
  providerConfigRef:
    name: aws
---
apiVersion: eks.aws.upbound.io/v1beta1
kind: Cluster
metadata:
  annotations:
    meta.upbound.io/example-id: eks/v1beta1/fargateprofile
    uptest.upbound.io/timeout: "2400"
  labels:
    testing.upbound.io/example-name: example
  name: sample-eks-cluster
spec:
  forProvider:
    region: us-east-1
    roleArnRef:
      name: eks-cluster-role
    vpcConfig:
      - subnetIdRefs:
          - name: subnet1
          - name: subnet2
          - name: subnet3
  providerConfigRef:
    name: aws
---
apiVersion: eks.aws.upbound.io/v1beta1
kind: NodeGroup
metadata:
  name: sample-eks-ng
spec:
  forProvider:
    clusterNameRef:
      name: sample-eks-cluster
    nodeRoleArnRef:
      name: eks-nodegroup-role
    region: us-east-1
    diskSize: 20
    instanceTypes: ["t2.small"]
    scalingConfig:
      - desiredSize: 2
        maxSize: 2
        minSize: 1
    subnetIdRefs:
      - name: subnet1
      - name: subnet2
      - name: subnet3
  providerConfigRef:
    name: aws
---
apiVersion: eks.aws.upbound.io/v1beta1
kind: ClusterAuth
metadata:
  annotations:
    meta.upbound.io/example-id: eks/v1beta1/cluster
  name: auth
spec:
  forProvider:
    clusterNameSelector:
      matchLabels:
        testing.upbound.io/example-name: example
    region: us-east-1
  writeConnectionSecretToRef:
    name: cluster-conn
    namespace: upbound-system
  providerConfigRef:
    name: aws
---
apiVersion: iam.aws.upbound.io/v1beta1
kind: Role
metadata:
  name: eks-cluster-role
spec:
  forProvider:
    assumeRolePolicy: |
      {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Principal": {
              "Service": "eks.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
          }
        ]
      }
    description: "EKS Cluster Role"
    maxSessionDuration: 3600
    tags:
      Name: eks-cluster-role
  providerConfigRef:
    name: aws
---
apiVersion: iam.aws.upbound.io/v1beta1
kind: Role
metadata:
  name: eks-nodegroup-role
spec:
  forProvider:
    assumeRolePolicy: |
      {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Principal": {
              "Service": "ec2.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
          }
        ]
      }
    description: "EKS Node Group Role"
    maxSessionDuration: 3600
    tags:
      Name: eks-nodegroup-role
  providerConfigRef:
    name: aws
---
apiVersion: iam.aws.upbound.io/v1beta1
kind: RolePolicyAttachment
metadata:
  name: eks-nodegroup-role-policy
spec:
  forProvider:
    policyArn: arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
    roleRef:
      name: eks-nodegroup-role
  providerConfigRef:
    name: aws
---
apiVersion: iam.aws.upbound.io/v1beta1
kind: RolePolicyAttachment
metadata:
  name: eks-nodegroup-cni-policy
spec:
  forProvider:
    policyArn: arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
    roleRef:
      name: eks-nodegroup-role
  providerConfigRef:
    name: aws
---
apiVersion: iam.aws.upbound.io/v1beta1
kind: RolePolicyAttachment
metadata:
  name: eks-nodegroup-registry-policy
spec:
  forProvider:
    policyArn: arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
    roleRef:
      name: eks-nodegroup-role
  providerConfigRef:
    name: aws